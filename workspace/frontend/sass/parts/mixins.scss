@mixin prefix($property, $value) {
	@each $prefix in -webkit-, -moz-, -ms-, -o-, '' {
		#{$prefix}#{$property}: $value;
	}
}

// Horizontal gradient, from left to right
//
// Creates two color stops, start and end, by specifying a color and position for each color stop.
// Color stops are not available in IE9 and below.
@mixin gradient-horizontal($start-color: #555, $end-color: #333, $start-percent: 0%, $end-percent: 100%) {
	background-color: $start-color;
	background-image: linear-gradient(to right, $start-color $start-percent, $end-color $end-percent);
	background-repeat: repeat-x;
	filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#{ie-hex-str($start-color)}', endColorstr='#{ie-hex-str($end-color)}', GradientType=1);
}

// Vertical gradient, from top to bottom
//
// Creates two color stops, start and end, by specifying a color and position for each color stop.
// Color stops are not available in IE9 and below.
@mixin gradient-vertical($start-color: #555, $end-color: #333, $start-percent: 0%, $end-percent: 100%) {
	//background-color: $start-color;
	background-image: linear-gradient(to bottom, $start-color $start-percent, $end-color $end-percent);
	background-repeat: repeat-x;
	//filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#{ie-hex-str($start-color)}', endColorstr='#{ie-hex-str($end-color)}', GradientType=0);
}

@mixin gradient-directional($start-color: #555, $end-color: #333, $deg: 45deg) {
	//background-color: $start-color;
	background-repeat: repeat-x;
	background-image: -webkit-linear-gradient($deg, $start-color, $end-color);
	background-image: -moz-linear-gradient($deg, $start-color, $end-color);
	background-image: linear-gradient($deg, $start-color, $end-color);
}

@mixin animation($animate...) {
	$max: length($animate);
	$animations: '';

	@for $i from 1 through $max {
		$animations: #{$animations + nth($animate, $i)};

		@if $i < $max {
			$animations: #{$animations + ", "};
		}
	}
	
	animation: $animations;
	//@include prefix(animation-fill-mode, both);
}

@mixin keyframes($animationName) {
	@-webkit-keyframes #{$animationName} {
		@content;
	}
	@-moz-keyframes #{$animationName} {
		@content;
	}
	@-o-keyframes #{$animationName} {
		@content;
	}
	@keyframes #{$animationName} {
		@content;
	}
}

// Baseline, measured in pixels
// The value should be the same as the font-size value for the html element
// If the html element's font-size is set to 62.5% (of the browser's default font-size of 16px),
// then the variable below would be 10px.
 
@mixin rem($property, $px_values) {
 
	// Convert the baseline into rems
	$baseline_rem: ($baseline_px / 1rem);
 
	// Print the first line in pixel values
	#{$property}: $px_values;
 
	// If there is only one (numeric) value, return the property/value line for it.
	@if type-of($px_values) == 'number' {
		#{$property}: $px_values / $baseline_rem;
	}
 
	// If there is more than one value, create a list and perform equations on each value
	@else {
 
		// Create an empty list that we can dump values into
		$rem_values: ();
 
		@each $value in $px_values {
 
			// If the value is zero, return 0
			@if $value == 0 { 
				$rem_values: append($rem_values, $value); 
			}
 
			// If the value is not zero, convert it from px to rem
			@else {
				$rem_values: append($rem_values, ($value / $baseline_rem) );
			}
 
		}
 
		// Return the property and its list of converted values
		#{$property}: $rem_values;
 
	}
 
}